buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.15.0"
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'project-report'
apply plugin: 'com.github.ben-manes.versions'

apply from: 'dependencies.gradle'

defaultTasks 'clean', 'check'


archivesBaseName = 'edison-jobtrigger'
group = 'de.otto.edison'
version = '2.1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    // FIXME: pinning javassist to this version as there's a bug with powermock & javassist (3.20.0-GA) and Java 8 lambdas in later versions
    // be careful, javassist is a transitiv dependency for spring as well so this might cause trouble in the future
    resolutionStrategy.force "org.javassist:javassist:3.18.2-GA"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
    exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    compile libraries.edison
    compile libraries.bootstrap
    compile libraries.guava
    compile libraries.logging
    compile libraries.jetty
    compile libraries.asyncHttp
    compile libraries.gson
    compile libraries.spring

    testCompile libraries.test
}

test {
    // pass -Dspring.profiles.active=local and other system properties to the test task
    systemProperties = System.properties
}

eclipse {
    classpath {
        //customizing the classes output directory:
        defaultOutputDir = file('build/bin')

        //default settings for downloading sources and Javadoc:
        downloadSources = true
        downloadJavadoc = false
    }
}

tasks.processResources {
    doLast {
        def resourcesDir = project.sourceSets.main.output.resourcesDir
        resourcesDir.mkdirs()

        def versionProperties = new File(resourcesDir, "version.properties")
        if (versionProperties) {
            def gitVersion = runCommand("git log -n 1 --format=format:%H")
            def fullVersion = fullyQualifiedVersion()
            versionProperties.text = "\nedison.status.vcs.commit = ${gitVersion}" + "\nedison.status.vcs.version = ${fullVersion}" + "\nedison.status.vcs.url-template = https://github.com/otto-de/edison-jobtrigger"
        }
    }
}

def String fullyQualifiedVersion() {
    def env = System.getenv()
    def versionFromEnv = env.VERSION
    def version
    if (versionFromEnv) {
        version = versionFromEnv
    } else {
        version = '0.1-localbuild'
    }
    return version
}

def String runCommand(def command) {
    Process proc = command.execute()
    def out = new StringBuffer()
    proc.consumeProcessOutputStream(out)
    proc.consumeProcessErrorStream(out)
    proc.waitFor()
    def errorlevel = proc.exitValue()
    if (errorlevel != 0) {
        throw new RuntimeException("exec failed on command: '${command}' with errorlevel ${errorlevel}".toString())
    }
    out.toString().trim()
}



